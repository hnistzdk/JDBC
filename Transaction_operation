package JBDC;

import java.sql.*;

/**
 * @Description
 * @Author zdk
 * @Date 2020/10/27 18:46
 *
 *事务操作由一组SQL语句组成 这些语句要么都执行要么都不执行 具有原子性
 * 可实现对数据的批量修改
 *
 */
public class Transaction_operation {
    private static String driver="com.mysql.cj.jdbc.Driver";
    private static String url="jdbc:mysql://localhost:3306/StudentScore?useUnicode=true&characterEncoding=UTF-8";
    private static String user="root";
    private static String password="root";

    public static void main(String[] args)
    {
        String selectSql="SELECT *FROM student";
        String insertSql1="INSERT INTO student(sNo,sName,sex,age,dept) VALUES('201201010','张三','男',18,'计算机')";//添加
        String insertSql2="INSERT INTO student(sNo,sName,sex,age,dept) VALUES('201201011','李四','男',19,'会计')";//修改
        String insertSql3="INSERT INTO student(sNo,sName,sex,age,dept) VALUES('201201012','王五','男',20,'金融')";
        Connection conn =null;
        Statement statement=null;
        ResultSet resultSet=null;
        try
        {
            //注册JDBC驱动程序
            Class.forName(driver);
            conn = DriverManager.getConnection(url, user, password);
            statement=conn.createStatement();
            boolean autoCommit=conn.getAutoCommit();//获得是否为自动提交模式
            conn.setAutoCommit(false);//设置为非自动提交模式
            statement.executeUpdate(insertSql1);
            statement.executeUpdate(insertSql2);
            statement.executeUpdate(insertSql3);
            conn.commit();//事务完成后 执行提交操作
            conn.setAutoCommit(autoCommit);//重新设置为自动提交
            resultSet=statement.executeQuery(selectSql);//结果集查询
            while(resultSet.next())
            {
                String no=resultSet.getString("sNo");
                String name=resultSet.getString("sName");
                String sex=resultSet.getString("sex");
                int age=resultSet.getInt("age");
                String dept=resultSet.getString("dept");
                System.out.println(no+" "+name+" "+sex+" "+age+" "+dept);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            //如果事务中任何一条SQL语句没有生效就会抛出SQLException异常
            //然后必须用rollback()方法使数据恢复到事务执行前的状态
            if(conn!=null)
            {
                try {
                    conn.rollback();
                }
                catch (SQLException e1){
                    e1.printStackTrace();
                }
            }
        }
        finally {
            try {
                if(resultSet!=null) resultSet.close();
                if(statement!=null) statement.close();
                if(conn!=null) conn.close();
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}
